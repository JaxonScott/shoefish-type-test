import { type NextPage } from "next";
import React from "react";
import Head from "next/head";
import { useState, useEffect } from "react";
import clsx from "clsx";
import Countdown from "react-countdown";

const Home: NextPage = () => {
  const [correct, setCorrect] = useState(true);
  const [started, setStarted] = useState(false);
  const [index, setIndex] = useState(0);
  const [pressedKeys, setPressedKeys] = useState([]);

  const handleTimerState = () => {
    setStarted(true);
  };
  //timer
  const time = React.useMemo(() => {
    return Date.now() + 30 * 1000;
  }, [started]);

  const renderer = ({ seconds }: { seconds: number }) => {
    if (!started) {
      return <button onClick={handleTimerState}>Start</button>;
    } else {
      return <span>{seconds}</span>;
    }
  };

  const testText = [
    "programming",
    "is",
    "the",
    "art",
    "and",
    "science",
    "of",
    "instructing",
    "a",
    "computer",
    "to",
    "perform",
    "tasks,",
    "using",
    "a",
    "programming",
    "language",
    "to",
    "write",
    "instructions",
    "that",
    "are",
    "executed",
    "by",
    "a",
    "computer,",
    "and",
    "debugging",
    "code",
    "to",
    "fix",
    "errors,",
    "whether",
    "you",
    "are",
    "working",
    "on",
    "web",
    "development,",
    "software",
    "engineering,",
    "or",
    "data",
    "analysis,",
    "programming",
    "is",
    "a",
    "powerful",
    "tool",
    "for",
    "solving",
    "complex",
    "problems",
    "and",
    "creating",
    "innovative",
    "solutions.",
  ];

  useEffect(() => {
    const detectKeyDown = (e) => {
      if (
        e.key === testText.toString().replaceAll(",", " ")[index] &&
        e.key !== "Backspace"
      ) {
        setIndex(index + 1);
        setCorrect(correct);
        setPressedKeys([...pressedKeys, e.key]);
      } else if (e.key === "Backspace" && index >= 0) {
        setPressedKeys(pressedKeys.slice(0, -1));
        setIndex(index - 1);
      } else {
        setPressedKeys([...pressedKeys, e.key]);
        setCorrect(false);
      }
    };

    document.addEventListener("keydown", detectKeyDown, true);
  }, [index]);

  return (
    <>
      <Head>
        <title>Shoefish</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="mx-auto flex h-screen w-1/2 flex-col items-center justify-center">
        <h1>{`${pressedKeys.join("").split(" ").length} / 50`}</h1>
        <Countdown
          date={time}
          renderer={renderer}
          onComplete={() => setStarted(false)}
        ></Countdown>
        {started ? <h1>{testText.toString().replaceAll(",", " ")}</h1> : <></>}
        {started ? (
          <div className="flex">
            <p
              className={clsx({
                ["text-red-700"]: !correct,
                ["text-green-500"]: correct,
              })}
            >
              {pressedKeys.map((i) => (
                <>{i}</>
              ))}
            </p>
          </div>
        ) : (
          <></>
        )}
      </main>
    </>
  );
};

export default Home;
